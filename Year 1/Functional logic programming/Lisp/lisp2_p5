(defun getRightSubtree(L cont)
  (cond
   ((and (= cont 0) (not (numberp (first L))))    L)
   (T                                            (getRightSubtree (rest (rest L)) (+ (- cont 1) (second L))))
  )
) 

(defun inorderTraversal(L)
  (cond
   ((= (second L) 0)        (list (first L)))
   ((= (first (rest L)) 1)  (cons (third L) (first L)))
   (T                       (append (inorderTraversal (rest (rest L))) (append (list (first L)) (inorderTraversal (getRightSubtree (rest (rest L)) 1)))))
  )
)

(defvar *list* '(A 2 B 0 C 2 D 0 E 2 R 0 C 0))
(setq listTree (getRightSubtree (rest (rest *list*)) 1))
(setq listr (inorderTraversal *list*))
(print listr) 
