(defun list-length-rec (L)
 (if (null L)
   0
 (+ 1 (list-length-rec(rest L))))
)

(defvar *list* '(10 20 30 40 50))
(defvar *listLength* (list-length-rec *list*))

(defun list-nth-add (n La)
  "Writes twice n-th element"
  (cond
   ((null La)   nil)
   ((> n *listLength*) La)
   ((= n 1)  (cons (first La) La))
   (t          (cons (first La) (list-nth-add (1- n) (rest La))))
  )
)

(defun main_list_add (n La)
  (setq *listLength* (list-length-rec La))
  (list-nth-add n La)
)

(defvar newList)
(setq newList (main_list_add 3 *list*))

(print newList)

(defun testsm()
  (assert (equal (main_list_add 3 *list*) '(10 20 30 30 40 50)))
  (assert (equal (main_list_add 1 '(10 20)) '(10 10 20)))
  (assert (equal (main_list_add 10 *list*) '(10 20 30 40 50)))
)

(testsm)
